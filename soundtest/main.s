.include "defs.s"

.zeropage

.code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Reset handler

.proc reset

	sei             ; Disable interrupts
	cld             ; Clear decimal mode
	ldx #$ff
	txs             ; Initialize SP = $FF
	inx
	stx PPU_CTRL    ; PPU_CTRL = 0 (see: https://wiki.nesdev.com/w/index.php/PPU_registers#PPUCTRL)
	stx PPU_MASK    ; PPU_MASK = 0
	stx APU_STATUS  ; APUSTATUS = 0

	; jsr zeroapu
	jsr init_apu
	ppuwarmup
	zeroram

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; Game code begins here ;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

forever:

	jsr play_pulse_A_duty_ntsc
	jsr delay_one_second_ntsc
	jsr play_pulse_A_volume_ntsc
	jsr delay_one_second_ntsc
	jsr play_pulse_scales_ntsc
	jsr delay_one_second_ntsc

	jmp forever

.endproc

; include library procedures
.include "procedures.s"

; NTSC period table generated by mktables.py
; See: https://wiki.nesdev.com/w/index.php/APU_period_table
periodTableLo:
	.byte $f1, $7f, $13, $ad, $4d, $f3, $9d, $4c, $00, $b8, $74, $34
	.byte $f8, $bf, $89, $56, $26, $f9, $ce, $a6, $80, $5c, $3a, $1a
	.byte $fb, $df, $c4, $ab, $93, $7c, $67, $52, $3f, $2d, $1c, $0c
	.byte $fd, $ef, $e1, $d5, $c9, $bd, $b3, $a9, $9f, $96, $8e, $86
	.byte $7e, $77, $70, $6a, $64, $5e, $59, $54, $4f, $4b, $46, $42
	.byte $3f, $3b, $38, $34, $31, $2f, $2c, $29, $27, $25, $23, $21
	.byte $1f, $1d, $1b, $1a, $18, $17, $15, $14

periodTableHi:
	.byte $07, $07, $07, $06, $06, $05, $05, $05, $05, $04, $04, $04
	.byte $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02
	.byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.byte $00, $00, $00, $00, $00, $00, $00, $00

; These offsets correspond to indexes into periodTableLo and periodTableHi which
; will produce the notes A-G. To go up one or more octaves, add multiples of 12
; ($0c) to each value.
periodTableOffsetsAToG:
	.byte $00, $02, $03, $04, $06, $08, $0a, $0b

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NMI (vertical blank) handler

.proc nmi
	rti
.endproc

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; IRQ handler

.proc irq
	rti
.endproc

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Vector table

.segment "VECTOR"
.addr nmi
.addr reset
.addr irq

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Empty CHR data, for now

.segment "CHR0a"
.segment "CHR0b"
